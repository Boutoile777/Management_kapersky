from flask import Flask, jsonify
from flask_cors import CORS
from config import Config
from models import db
from routes.auth_routes import auth_bp
from routes.abonnement_routes import abonnement_bp
from sqlalchemy import text
from flask_jwt_extended import JWTManager  # ‚úÖ Import du gestionnaire JWT
from apscheduler.schedulers.background import BackgroundScheduler

def create_app():
    app = Flask(__name__)
    app.config.from_object(Config)

    # ‚úÖ Activation CORS
    CORS(app)

    # ‚úÖ Initialisation de la base de donn√©es
    db.init_app(app)

    # ‚úÖ Initialisation JWT
    JWTManager(app)

    # ‚úÖ Route de test
    @app.route("/ping")
    def ping():
        try:
            result = db.session.execute(text("SELECT 1")).scalar()
            return jsonify({"message": "Flask OK, PostgreSQL OK", "result": result})
        except Exception as e:
            return jsonify({"message": "Erreur base de donn√©es", "error": str(e)}), 500

    # ‚úÖ Enregistrement des Blueprints
    app.register_blueprint(auth_bp, url_prefix="/auth")
    app.register_blueprint(abonnement_bp, url_prefix="/abonnements")

    # ‚úÖ Message au lancement
    print("üöÄ Application Flask lanc√©e avec succ√®s !")
    print("üîë JWT actif | üì¶ Base PostgreSQL connect√©e")

    return app

# --- Cr√©ation de l'app ---
app = create_app()

# --- Scheduler ---
scheduler = BackgroundScheduler()

def scheduled_job():
    from utils.notifications import send_notifications
    with app.app_context():  # ‚úÖ Cr√©e un contexte Flask pour acc√©der √† la DB
        send_notifications()

# Ex√©cution tous les jours √† 9h
scheduler.add_job(scheduled_job, 'cron', hour=10, minute=29)
scheduler.start()
print("‚è∞ Scheduler d√©marr√©, envoi des notifications programm√© √† 9h chaque jour.")

# --- Lancement du serveur Flask ---
if __name__ == "__main__":
    app.run(debug=Config.DEBUG)
